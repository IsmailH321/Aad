## Program for creating machine that accepts three consecutive one.
def contains_three_consecutive_ones(input_string):
    if '111' in input_string:
        return True
    return False

if __name__ == "__main__":
    input_string = input("Enter a binary string: ")
    
    if contains_three_consecutive_ones(input_string):
        print("The string contains three consecutive 1's.")
    else:
        print("The string does not contain three consecutive 1's.")


## Program for creating machine that accepts the string always ending with 101.
def ends_with_101(input_string):
    if input_string.endswith('101'):
        return True
    return False

if __name__ == "__main__":
    input_string = input("Enter a binary string: ")
    
    if ends_with_101(input_string):
        print("The string ends with '101'.")
    else:
        print("The string does not end with '101'.")


## Design a program for accepting decimal number divisible by 2.
def check_divisible_by_2(decimal_number):
    decimal_str = str(decimal_number)
    state = 'q0'
    for digit in decimal_str:
        if state == 'q0':
            if digit in {'0', '2', '4', '6', '8'}:
                state = 'q0'
            elif digit in {'1', '3', '5', '7', '9'}:
                state = 'q1'
        elif state == 'q1':
            if digit in {'0', '2', '4', '6', '8'}:
                state = 'q0'
            elif digit in {'1', '3', '5', '7', '9'}:
                state = 'q1'

    return state == 'q0'

decimal_input = int(input("Enter a decimal number: "))
if check_divisible_by_2(decimal_input):
    print(f"The number {decimal_input} is valid.")
else:
    print(f"The number {decimal_input} is invalid.")


## program for generating derivation sequence / language for the given sequence of productions.
def generate_derivation(grammar, start_symbol, depth=3):
    derivations = [start_symbol]

    def derive(symbol, depth_left):
        if depth_left == 0 or symbol not in grammar:
            return
        production = grammar[symbol][0]
        derivations.append(production)
        for s in production:
            derive(s, depth_left - 1)

    derive(start_symbol, depth)
    return derivations

def generate_language(grammar, start_symbol, depth=3):
    derivations = generate_derivation(grammar, start_symbol, depth)
    language = []

    def to_terminal(symbol):
        if symbol.islower() or symbol not in grammar:
            return symbol
        return ''.join([to_terminal(s) for s in grammar[symbol][0]])

    for derivation in derivations:
        language.append(to_terminal(derivation))

    return language

def get_grammar():
    grammar = {}
    while True:
        non_terminal = input("Enter a non-terminal (or 'done' to finish): ").strip()
        if non_terminal.lower() == 'done':
            break
        rules = input(f"Enter rules for {non_terminal} (comma-separated): ").strip().split(',')
        grammar[non_terminal] = [rule.strip() for rule in rules]
    return grammar

grammar = get_grammar()
start_symbol = input("Enter the start symbol: ").strip()

derivation_sequence = generate_derivation(grammar, start_symbol)
print("\nDerivation Sequence:", ' -> '.join(derivation_sequence))

language = generate_language(grammar, start_symbol)
print("\nGenerated Language:", ', '.join(language))


## program for creating machine that accepts the string containing a (Given input{a, b}).
class DFA:
    def __init__(self):
        self.initial_state = "q0"
        self.state = self.initial_state
        self.accepting_states = {"q1"}

    def transition(self, char):
        if char == "a":
            self.state = "q1"

    def run(self, input_string):
        self.state = self.initial_state
        for char in input_string:
            if char not in {'a', 'b'}:
                return "REJECTED: Invalid character"
            self.transition(char)
        return "ACCEPTED" if self.state in self.accepting_states else "REJECTED"

user_input = input("Enter a string consisting of 'a' and 'b': ")
dfa = DFA()
result = dfa.run(user_input)
print(f"Input: {user_input} | Result: {result}")


## design a Turing machine to recognize all strings consisting of an even number of 1s.
class TuringMachine:
    def __init__(self, tape):
        self.tape = list(tape) + ["_"]
        self.head = 0
        self.state = "q0"

    def step(self):
        if self.tape[self.head] == "1":
            self.state = "q1" if self.state == "q0" else "q0"
            self.head += 1
        else:
            self.state = "q_accept" if self.state == "q0" else "q_reject"

    def run(self):
        while self.state not in ["q_accept", "q_reject"]:
            self.step()
        return "ACCEPTED" if self.state == "q_accept" else "REJECTED"

user_input = input("Enter a string of '1's only: ")

if set(user_input) <= {"1"}:
    tm = TuringMachine(user_input)
    print(tm.run())
else:
    print("Invalid input! Please enter only '1's.")
